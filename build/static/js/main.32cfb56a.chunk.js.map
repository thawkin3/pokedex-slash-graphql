{"version":3,"sources":["pokemon-logo.png","Filters.js","PokemonCard.js","PokemonCardsList.js","graphQLUtils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","pokemonTypes","useStyles","makeStyles","theme","optionsContainer","background","padding","spacing","borderRadius","marginBottom","formControl","margin","minWidth","selectEmpty","marginTop","Filters","pokemonTypeFilter","setPokemonTypeFilter","capturedFilter","setCapturedFilter","classes","Paper","variant","className","FormControl","InputLabel","Select","value","onChange","event","target","label","MenuItem","map","type","key","root","pokemonIdNumber","fontSize","avatar","height","cardActions","justifyContent","PokemonCard","pokemon","imgUrl","useState","isCaptured","setIsCaptured","Card","CardContent","Typography","color","gutterBottom","id","alt","name","src","component","join","CardActions","FormControlLabel","control","Switch","checked","flexGrow","paper","width","PokemonCardsList","pokedexData","Grid","container","length","item","xs","sm","md","lg","fetchGraphQL","operationsDoc","operationName","variables","a","fetch","method","headers","body","JSON","stringify","query","result","json","textAlign","pokemonLogo","maxWidth","App","React","setPokedexData","useEffect","pokemonType","fetchPokemonOfCertainTypeAndByCapturedStatusOperationsDoc","errors","data","console","error","queryPokemon","sort","pokemonA","pokemonB","fetchPokemonOfCertainTypeOperationsDoc","fetchPokemonByCapturedStatusOperationsDoc","fetchData","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.32cfb56a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokemon-logo.9253c457.png\";","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\n\nconst pokemonTypes = [\n  'Bug',\n  'Dark',\n  'Dragon',\n  'Electric',\n  'Fairy',\n  'Fighting',\n  'Fire',\n  'Flying',\n  'Ghost',\n  'Grass',\n  'Ground',\n  'Ice',\n  'Normal',\n  'Poison',\n  'Psychic',\n  'Rock',\n  'Steel',\n  'Water',\n]\n\nconst useStyles = makeStyles((theme) => ({\n  optionsContainer: {\n    background: '#FFF',\n    padding: `${theme.spacing(1)}px ${theme.spacing(2)}px`,\n    borderRadius: 4,\n    marginBottom: theme.spacing(2),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 300,\n    background: '#FFF',\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}))\n\nexport function Filters({\n  pokemonTypeFilter,\n  setPokemonTypeFilter,\n  capturedFilter,\n  setCapturedFilter,\n}) {\n  const classes = useStyles()\n\n  const handlePokemonTypeChange = (event) => {\n    setPokemonTypeFilter(event.target.value)\n  }\n\n  const handleCapturedChange = (event) => {\n    setCapturedFilter(event.target.value)\n  }\n\n  return (\n    <Paper variant=\"outlined\" className={classes.optionsContainer}>\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel>Type</InputLabel>\n        <Select\n          value={pokemonTypeFilter}\n          onChange={handlePokemonTypeChange}\n          label=\"Type\"\n        >\n          <MenuItem value=\"Any\">Any</MenuItem>\n          {pokemonTypes.map((type) => (\n            <MenuItem value={type} key={type}>\n              {type}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel>Captured</InputLabel>\n        <Select\n          value={capturedFilter}\n          onChange={handleCapturedChange}\n          label=\"Captured\"\n        >\n          <MenuItem value=\"Any\">Any</MenuItem>\n          <MenuItem value=\"Captured\">Captured</MenuItem>\n          <MenuItem value=\"Not Captured\">Not Captured</MenuItem>\n        </Select>\n      </FormControl>\n    </Paper>\n  )\n}\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Switch from '@material-ui/core/Switch'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minWidth: 275,\n  },\n  pokemonIdNumber: {\n    fontSize: 14,\n    marginBottom: theme.spacing(4),\n  },\n  avatar: {\n    height: theme.spacing(16),\n    borderRadius: 0,\n    marginBottom: theme.spacing(1),\n  },\n  cardActions: {\n    justifyContent: 'center',\n  },\n}))\n\nexport function PokemonCard({ pokemon, imgUrl }) {\n  const classes = useStyles()\n\n  const [isCaptured, setIsCaptured] = useState(false)\n\n  const handleCapturedChange = () => {\n    setIsCaptured((isCaptured) => !isCaptured)\n  }\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Typography\n          className={classes.pokemonIdNumber}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {pokemon.id}\n        </Typography>\n        <img alt={pokemon.name} src={imgUrl} className={classes.avatar} />\n        <Typography variant=\"h5\" component=\"h2\">\n          {pokemon.name}\n        </Typography>\n        <Typography color=\"textSecondary\">\n          {pokemon.pokemonTypes.join(', ')}\n        </Typography>\n      </CardContent>\n      <CardActions className={classes.cardActions}>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={isCaptured}\n              onChange={handleCapturedChange}\n              name=\"captured\"\n              color=\"primary\"\n            />\n          }\n          label=\"Captured\"\n        />\n      </CardActions>\n    </Card>\n  )\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\nimport { PokemonCard } from './PokemonCard'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    height: 140,\n    width: 100,\n  },\n  control: {\n    padding: theme.spacing(2),\n  },\n}))\n\nexport function PokemonCardsList({ pokedexData }) {\n  const classes = useStyles()\n\n  return (\n    <Grid container className={classes.root} spacing={2}>\n      {pokedexData.length > 0 &&\n        pokedexData.map((pokemon) => (\n          <Grid key={pokemon.name} item xs={12} sm={6} md={4} lg={3}>\n            <PokemonCard pokemon={pokemon} imgUrl={pokemon.imgUrl} />\n          </Grid>\n        ))}\n    </Grid>\n  )\n}\n","async function fetchGraphQL(operationsDoc, operationName, variables) {\n  const result = await fetch(\n    'https://pokedex.us-west-2.aws.cloud.dgraph.io/graphql',\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: operationsDoc,\n        operationName,\n        variables,\n      }),\n    }\n  )\n\n  return await result.json()\n}\n\nconst fetchAllPokemonOperationsDoc = `\n  query fetchAllPokemon {\n    queryPokemon {\n      id\n      name\n      captured\n      imgUrl\n      pokemonTypes\n    }\n  }\n`\n\nexport function fetchAllPokemon() {\n  return fetchGraphQL(fetchAllPokemonOperationsDoc, 'fetchAllPokemon', {})\n}\n\nconst fetchPokemonOfCertainTypeOperationsDoc = (pokemonType) => `\n  query fetchPokemonOfCertainType {\n    queryPokemon(filter: { pokemonTypes: { eq: [${pokemonType}] } }) {\n      id\n      name\n      captured\n      imgUrl\n      pokemonTypes\n    }\n  }\n`\n\nexport function fetchPokemonOfCertainType(pokemonType) {\n  return fetchGraphQL(\n    fetchPokemonOfCertainTypeOperationsDoc(pokemonType),\n    'fetchPokemonOfCertainType',\n    {}\n  )\n}\n\nconst fetchPokemonByCapturedStatusOperationsDoc = (isCaptured) => `\n  query fetchPokemonByCapturedStatus {\n    queryPokemon(filter: { captured: ${isCaptured} }) {\n      id\n      name\n      captured\n      imgUrl\n      pokemonTypes\n    }\n  }\n`\n\nexport function fetchPokemonByCapturedStatus(isCaptured) {\n  return fetchGraphQL(\n    fetchPokemonByCapturedStatusOperationsDoc(isCaptured),\n    'fetchPokemonByCapturedStatus',\n    {}\n  )\n}\n\nconst fetchPokemonOfCertainTypeAndByCapturedStatusOperationsDoc = ({\n  pokemonType,\n  isCaptured,\n}) => `\n  query fetchPokemonOfCertainTypeAndByCapturedStatus {\n    queryPokemon(filter: { captured: ${isCaptured}, pokemonTypes: { eq: [${pokemonType}] } }) {\n      id\n      name\n      captured\n      imgUrl\n      pokemonTypes\n    }\n  }\n`\n\nexport function fetchPokemonOfCertainTypeAndByCapturedStatus({\n  pokemonType,\n  isCaptured,\n}) {\n  return fetchGraphQL(\n    fetchPokemonOfCertainTypeAndByCapturedStatusOperationsDoc({\n      pokemonType,\n      isCaptured,\n    }),\n    'fetchPokemonOfCertainTypeAndByCapturedStatus',\n    {}\n  )\n}\n","import React from 'react'\nimport Container from '@material-ui/core/Container'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport { Filters } from './Filters'\nimport { PokemonCardsList } from './PokemonCardsList'\nimport pokemonLogo from './pokemon-logo.png'\nimport {\n  fetchAllPokemon,\n  fetchPokemonOfCertainType,\n  fetchPokemonByCapturedStatus,\n  fetchPokemonOfCertainTypeAndByCapturedStatus,\n} from './graphQLUtils'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    textAlign: 'center',\n  },\n  pokemonLogo: {\n    maxWidth: '90%',\n    width: 400,\n  },\n}))\n\nfunction App() {\n  const classes = useStyles()\n\n  const [pokedexData, setPokedexData] = React.useState([])\n  const [pokemonTypeFilter, setPokemonTypeFilter] = React.useState('Any')\n  const [capturedFilter, setCapturedFilter] = React.useState('Any')\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      if (pokemonTypeFilter !== 'Any' && capturedFilter !== 'Any') {\n        const {\n          errors,\n          data,\n        } = await fetchPokemonOfCertainTypeAndByCapturedStatus({\n          pokemonType: pokemonTypeFilter,\n          isCaptured: capturedFilter === 'Captured',\n        })\n\n        if (errors) {\n          console.error(errors)\n        }\n\n        const result = data.queryPokemon.sort(\n          (pokemonA, pokemonB) => pokemonA.id - pokemonB.id\n        )\n        setPokedexData(result)\n      } else if (pokemonTypeFilter !== 'Any') {\n        const { errors, data } = await fetchPokemonOfCertainType(\n          pokemonTypeFilter\n        )\n\n        if (errors) {\n          console.error(errors)\n        }\n\n        const result = data.queryPokemon.sort(\n          (pokemonA, pokemonB) => pokemonA.id - pokemonB.id\n        )\n        setPokedexData(result)\n      } else if (capturedFilter !== 'Any') {\n        const { errors, data } = await fetchPokemonByCapturedStatus(\n          capturedFilter === 'Captured'\n        )\n\n        if (errors) {\n          console.error(errors)\n        }\n\n        const result = data.queryPokemon.sort(\n          (pokemonA, pokemonB) => pokemonA.id - pokemonB.id\n        )\n        setPokedexData(result)\n      } else {\n        // Any type, Any captured status\n        const { errors, data } = await fetchAllPokemon()\n\n        if (errors) {\n          console.error(errors)\n        }\n\n        const result = data.queryPokemon.sort(\n          (pokemonA, pokemonB) => pokemonA.id - pokemonB.id\n        )\n        setPokedexData(result)\n      }\n    }\n\n    fetchData()\n  }, [pokemonTypeFilter, capturedFilter])\n\n  return (\n    <main className={classes.root}>\n      <Container>\n        <img src={pokemonLogo} alt=\"\" className={classes.pokemonLogo} />\n        <Typography variant=\"srOnly\">\n          <h1>Pokémon Pokédex</h1>\n        </Typography>\n        <Filters\n          pokemonTypeFilter={pokemonTypeFilter}\n          setPokemonTypeFilter={setPokemonTypeFilter}\n          capturedFilter={capturedFilter}\n          setCapturedFilter={setCapturedFilter}\n        />\n        <PokemonCardsList pokedexData={pokedexData} />\n      </Container>\n    </main>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}